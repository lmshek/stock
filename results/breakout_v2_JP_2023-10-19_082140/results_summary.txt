============== PARAMS ==============
Market: JP
No. of stocks: 398
Model: breakout_v2 
Start Date: 2020-10-19 08:21:39.679666 
End Date: 2023-10-19 08:21:39.679666 

============== Result Summary ==============
Initial Balance: 1000000.00 
Final Balance: 1155223.02 
Total Gain: 155223.02 
P/L: 15.52 % 


Buying Strategy:
    cup_formed = cup_left_high > cup_mid_low and cup_mid_low < cup_right_high \
        and is_similar(cup_left_high, cup_right_high, threshold=0.05)
    handle_formed = handle_depth > 0 and handle_depth <= cup_depth and (ts_handle_right - ts_handle_left).days < (ts_cup_right - ts_cup_left).days\
        and handle_left_high > handle_mid_low and handle_mid_low < handle_right_high \
        and is_similar(handle_left_high, handle_right_high, threshold= threshold) \
        and cup_depth / handle_depth <= 5.0 \
        and (ts_handle_right - ts_handle_left).days <= 100 # Don't want to hold the stock to long if it did not breakout
    going_to_breakout = is_similar(cup_left_high, handle_right_high, threshold=threshold) and is_similar(handle_right_high, hist['Close'][-1], threshold=threshold)


    #vol_increase = hist['Volume'][-2] <= hist['Volume'][-1]
    vol_increase = True 
    price_condition = hist['Close'][-2] >= hist['Open'][-2] and hist['Close'][-1] >= hist['Open'][-1]                

    is_earning_date_coming = (stock_utils.next_earning_date(earning_dates, end_date) - end_date.date()).days <= 10

    potential_cup_and_handle = cup_formed & handle_formed & going_to_breakout & vol_increase & price_condition & (not is_earning_date_coming)

    if potential_cup_and_handle and target_cup_depth < cup_depth / hist['Close'][-1]: #and handle_depth / hist['Close'][-1] >= threshold:
        hist['cup_len'] = (ts_cup_right - ts_cup_left).days
        hist['handle_len'] = (ts_handle_right - ts_handle_left).days
        hist['cup_depth'] = cup_depth / hist['Close']
        hist['handle_depth'] = handle_depth / hist['Close']                

        target_cup_depth = cup_depth / hist['Close'][-1]
        return 1, hist['Close'].values[-1], hist.tail(1), 1

Selling Strategy:
    hist = stock_data[ticker]        
    
    current_price = hist['Close'][todays_date.date():todays_date.date()].values[-1]
    sell_price = buy_price + buy_price * cup_depth
    stop_price = buy_price - buy_price * handle_depth
    sell_date = stock_utils.get_market_real_date(market, buy_date, handle_len) # selling date        
    #time.sleep(1) #to make sure the requested transactions per seconds is not exceeded

    bbands = hist.ta.bbands(close=hist['Close'], length=20)
    hist['BBL_20_2.0'] = bbands['BBL_20_2.0']
    hist['BBM_20_2.0'] = bbands['BBM_20_2.0']
    hist['BBU_20_2.0'] = bbands['BBU_20_2.0']
    hist['BBB_20_2.0'] = bbands['BBB_20_2.0']
    hist['BBP_20_2.0'] = bbands['BBP_20_2.0']

    bbl = hist['BBL_20_2.0'][stock_utils.get_market_real_date(market, todays_date, -2).date():todays_date.date()]
    bbm = hist['BBM_20_2.0'][stock_utils.get_market_real_date(market, todays_date, -2).date():todays_date.date()]
    close = hist['Close'][stock_utils.get_market_real_date(market, todays_date, -2).date():todays_date.date()]

    #next_earning_date = stock_utils.next_earning_date(ticker, todays_date)
    
    if current_price is not None:
        if current_price >= buy_price:
            ##### Make Profit Strategy ####
            if close[0] < bbm[0] and close[1] < bbm[1] and close[2] < bbm[2] and close[1] > close [2]:
                return "SELL:3_consecutive_day_below_BBM", current_price #if criteria is met recommend to sell
            elif close[2] < bbl[2]:
                return "SELL:below_BBL", current_price #if criteria is met recommend to sell
            #elif stock_utils.get_market_days(todays_date.date(), next_earning_date) == 1:
            #    return "SELL:earning_date_next_market_day", current_price #if criteria is met recommend to sell            
            else:
                return "HOLD", current_price #if criteria is not met hold the stock
        else:
            #### Stop Loss Strategy ####
            if (current_price < stop_price):
                return "SELL:stop_loss", current_price #if criteria is met recommend to sell
            elif (current_price <= buy_price * (1 + cup_depth / 4) and stock_utils.get_market_days(buy_date, todays_date) >= handle_len / 2):
                return "SELL:did_not_breakout_within_half_handle", current_price #if criteria is met recommend to sell
            elif (todays_date >= sell_date ):
                return "SELL:already_matured", current_price #if criteria is met recommend to sell
            elif close[2] < bbl[2] and close[1] < bbl[1]:
                return "SELL:2_consecutive_day_below_BBL", current_price #if criteria is met recommend to sell
            else:
                return "HOLD", current_price #if criteria is not met hold the stock
    else:
        return "HOLD", current_price #if criteria is not met hold the stock
